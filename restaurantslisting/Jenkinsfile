pipeline {
  agent any

  environment {
    DOCKERHUB_CREDENTIALS = credentials('DOCKER_HUB_CREDENTIAL')
    VERSION = "${env.BUILD_ID}"
  }

  tools {
    maven "Maven"
  }

  stages {
    stage('Maven Build') {
      steps {
        dir('restaurantslisting') {
          sh 'mvn clean package -DskipTests'
        }
      }
    }

    stage('Run Tests') {
      steps {
        dir('restaurantslisting') {
          sh 'mvn test'
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        dir('restaurantslisting') {
          sh 'mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar -Dsonar.host.url=http://15.237.182.253:9000/ -Dsonar.login=squ_e6fe2fc6b2c1faf3fa3675c1588ee7ac24810035'
        }
      }
    }

    stage('Check code coverage') {
      steps {
        script {
          def token = "squ_e6fe2fc6b2c1faf3fa3675c1588ee7ac24810035"
          def sonarQubeUrl = "http://15.237.182.253:9000/api"
          def componentKey = "com.codedecode:restaurantslisting"
          def coverageThreshold = 40.0

          def response = sh(
            script: "curl -H 'Authorization: Bearer ${token}' '${sonarQubeUrl}/measures/component?component=${componentKey}&metricKeys=coverage'",
            returnStdout: true
          ).trim()

          def coverage = sh(
            script: "echo '${response}' | jq -r '.component.measures[0].value'",
            returnStdout: true
          ).trim().toDouble()

          echo "Coverage: ${coverage}"

          if (coverage < coverageThreshold) {
            error "Coverage is below the threshold of ${coverageThreshold}%. Aborting the pipeline."
          }
        }
      }
    }

    stage('Docker Build and Push') {
      steps {
        dir('restaurantslisting') { // Change to the directory containing the Dockerfile
          sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
          sh 'docker build -t ravishandoc/restaurant-listing-service:${VERSION} .'
          sh 'docker push ravishandoc/restaurant-listing-service:${VERSION}'
        }
      }
    }

    stage('Cleanup Workspace') {
      steps {
        deleteDir()
      }
    }

    stage('Update Image Tag in GitOps') {
      steps {
        // Clone the entire repository, not just a subdirectory
        checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-ssh', url: 'git@github.com:ravishansenevirathna/Food-Delivery-Application-Spring-Boot-Microservice-K8s-CICD-AWS.git']])
        script {
          // Navigate to the deployment folder
          dir('deployment-folder') {
            sh '''
              sed -i "s/image:.*/image: ravishandoc\\/restaurant-listing-service:${VERSION}/" aws/restaurant-manifest.yml
            '''
            sh 'git checkout main'
            sh 'git add .'
            sh 'git commit -m "Update image tag"'
            sshagent(['git-ssh']) {
              sh 'git push'
            }
          }
        }
      }
    }
  }
}
